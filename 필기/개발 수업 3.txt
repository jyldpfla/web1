● 프로그래밍에서의 디자인 = 무언가를 만들어 내는 패턴
-html,css → 보이는 부분 관여

● HTML : 내용(글자, 그림)을 보이게 하는 부분
● CSS : 스타일(글자/그림의 크기), 레이아웃(구조)
- 두 가지 모두 구조를 담당하지만, css가 실질적인 구조 배열 담당
● JavaScript : 프로그래밍 언어, 브라우저에 관여하고 내장(js를 해석하는 엔진 탑재)되어 있음,
서버 영역까지 확장해 관여
- V8 : 크롬, 엣지, 사파리 등에 포함된 엔진, 크롬 베이스인 엔진

● 이름 붙이는 방법(selector = 선택자) ★★★★★
1. tag(이름이 있는 것을 불러올 때) → 부르는 방법 : tag 이름 그대로 
2. ID(고유한 이름) → #이름
-id를 attributor라고 함
-1 태그, 1 id
3. class → .이름 /(여러 class가진 아이를 부를 때) .이름.이름
-1 태그, 한 칸 띄우고 여러 class 부여 가능(ex. <div  class= "header zzz sun">)
-다른 태그에 동일한 class 이름 부여해서 css 동시 적용 가능 → 그룹화 할 때 사용 
+++++ 선택자 불러오는 법
1. 부모 후손 관계 : 부모 .후손
2. 부모>자식 관계 : 부모>자식
3. + : 바로 아래에 있는 형제만
4. ~ : 아래에 있는 형제 전부
5. * : 전체 

● 네이밍 규칙 : 이름 붙일 때 사용하는 규칙

●시맨틱 태그(semantic tag) : 의미가 있는 태그
- <header>, <main>,<nav>,<section>, <footer>
- <figure>, <article>,<aside>

● html 구조(필수적이지 않은 파트도 o)
<section>으로 내용 전체 감싸기 + <h2>타이틀 + <p>타이틀에 관한 설명, 그림 + <figure>그림

●JavaScript
: 이벤트에 따라 반응
-css와 유기적으로 연결된 관계

● 라이브러리 : 만들어진 조각들을 따로 가지고 와서 사용
-js 라이브러리 → jQuery($) - 조금 더 쉽게 코딩 가능해짐
-jQuery 단점: js가 아니므로 따로 가져와서 사용해야함
● 프레임워크 : 이미 만들어진 것에 추가적으로 원하는 것을 구겨 넣는 것

겹치거나 띄울 때 : position: absolute → 기준이 필요 : position: relative

● 슬라이드
: 자식들이 슬라이드 됨
1) jQuery로 만들기
- 함수() 
-jQuery 이용해 js 파일 만들면 jQuery 링크 먼저 걸어주고 js파일 링크 걸어야함(컴퓨터는 순서대로 읽으므로 위치 잘 잡아야 함)
* js는 코딩할 때 입력 순서 중요(순서대로 적용되므로)

2) 플러그인 (라이브러리로 꽂아쓸 수 있도록 만들어둔 것) - 슬릭
(1) 사용법 : 파일 가져오기 - html 만들고 - js 적용, css링크/js링크 각각 폴더에 맞게 저장
(2) 슬릭의 특수성
-js는 html 태그 생성+삭제 가능 → 슬릭이 따로 자손들을 묶기 때문에(그룹화) 자손이 제대로 잡히지 않음, nth child가 먹지 않음

●bootstrap: 컬러 시스템, 시스템에서 색상 찾아쓸 수 있음
-작업관리자에서 style에서 색상 확인 가능

● transform은 레이아웃을 깨지 않고 자기자신만 움직이기 때문에 
● 좌표가 있어야 애니메이션 가능해짐
● position, display, transform 등 중요