<수업내용>
데이터 만든 후 저장 + 불러오기 → github

● github (버전 관리 시스템)
: 코드(소스) 저장소
-코드 복원, 여러 버전의 코드 생성 및 취합, 코딩 과정 일련적 기입
▶ 아이디.github.io 로 repository 만들면 호스팅 됨
▶ setting - pages - source : branch main/ root + read me 체크한 상태로 저장

●프로토콜
1) ftp : 파일 전송 다운을 담당하는 프로토콜
2) http

● web hosting
: 서버를 나누어서 할당

웹 표준에선 내용없는 html을 만드는 것은 어긋남, css로 만들면 됨

웹 접근성
: 스크린 리더기등을 사용할 수 있도록 만드는 것 (공공 홈페이지에서 필수적)
ex. <img alt>에 부가 설명

*<ctrl><shift><r> : 기억하고 있는 페이지(캐시)를 리로드(<f5>가 안먹을 때 사용!)
*<meta name="viewport" content="width=device-width, initial-scale=1.0">
: 모바일 페이지 만들 때 꼭 필요
*홈페이지 디자인 시 width는 보통 1200 고정, margin: 0 auto, 한 페이지의 사이즈를 맞추는 것이 중요

① <ol>(ordered list) : 넘버링된 리스트 / <ul>(unordered list) : 번호가 붙지 않는 리스트
/<dl> : 공간이 생김(안에 <dt>,<dd>가 들어감)
- <ol>, <ul> 안에는 <li>만 들어갈 수 있음(다른 거 넣으려면 <li>로 감싸야함)
-<li> : 목록 안에 하나하나를 표시
② <a> : 링크 주소, href="링크주소명", target="창 여는 형식"
③ <hr> : 선
④ <main>(ie에서 안 먹음)

● display, position
: 레이아웃을 잡는 기본 

1) display (1~4까지 알기, 2가 제일 중요)
(1) display: none; : 없애기 
-display의 가장 기본, 스크린 리더기도 읽지 못함
(2) display: block; : 나타내기, 박스가 되어라(박스의 속성을 가짐)
(3) display :inline-block; : 박스 but 친화적(옆에 박스가 올 수 있음)
-icon이 이 속성을 가짐
-inline 속성을 가지므로 text-align:center로 중간에 배치 가능
-layout에 주로 사용 하지 않음(박스 속성을 가지면서 text 속성을 가지므로 자동으로 벌어지는 pixel이 있어서)
(4) display : flex; : 자식들을 가로로 배치
-inline 속성처럼 쪼그라드는 속성을 가짐
(5) display : grid; 
-현재 최신 버전에서만 돌아감(IE 지원하지 않음)
(6) display: table; 

2) position : 겹치거나 올려둘 때
(1) position: static; : display none과 비슷, position이 아니게 하는 것(position을 뺄 때)
-반응형 웹디자인에 필요
(2) position: relative; : 좌표로 자기 자신을 움직임, absolute로 떠 있는 것의 기준점이 됨, 어떠한 속성들도 뺏지 않고 기준점으로만 작용
(3) position: absolute; : 떠오르고 쪼그라드는 속성, 좌표(top,left,right,bottom)를 가짐, 부모태그의 위치에 관계없이(기준없이) 떠오름, 겹쳐짐
(4) position: fixed; : 떠오름, 어떠한 기준도 없음(기준을 잡을 수 없음), 뷰포트의 모서리에 무조건 자리를 잡음, 고정되어 scroll bar의 영향을 받지 않음

● 선택자 이름
1)태그 : 이미 이름이 있으므로 따로 부여할 필요x, but 현장에선 이름 붙여 사용하는 경우 많음
2) ID : 하나의 고유한 이름
-한 html에 같은 이름 id 가질 수 없음, 한 태그에 여러 id를 붙일 수 없음
-값을 부를 때 많이 사용하므로, 가장 바깥쪽 박스에 사용하거나 안씀
-너무 많이 쓰면 브라우저에 렉 걸릴 수 있음
-호출 방법 : #이름
3) class : 그룹
- 개수에 관계없고, 한 태그에 여러 이름의 class를 붙일 수 있음
- 호출 방법 : .이름

*transform - 내가 움직여도 layout 을 깨뜨리지 않고 움직임, 애니메이션의 기본
*transition - 부드럽게 움직임

● 반응형 웹 만들어보기
1) reset css : 태그에 포함된 기본적 디자인을 모두 reset된 상태로 만드는 것
(ex. <h1> 기본 디자인 없애기)
→ box sizing 설정 중요
→ vertical align : text, image같은 inline 요소들을 정렬 (img가 가진 빈 칸을 vertical align:middle이 없애줌)
→ line height : 글자와 글자 사이 간격 (레이아웃 잡을 때 1로 잡는 게 유리함)
2) 웹 폰트, 웹 아이콘 가져와서 쓰기
→ 폰트를 하나만(주로 noto sans korean), 간격 잘 설정(1/3/4/5/7/9)
→ 구글 웹폰트, xeicon(=아이콘이지만 폰트)
*폰트 사이즈 = 높이 *xeicon : inline-block 성질
→ xeicon에서 링크 복사해서 붙여넣고, 이름 맞춰서 html에 원하는 아이콘 넣기
*CDN(contents delivery network) : 클라우드에서 이미지를 가져와서 쓰는 것
-서버들을 세계 각지에 분배해서 사용, 내 소스가 다른 소속에 포함되어 있음
-내 서버 (유한한 공간, 트래픽(회선)) 자원 소요 없이 사용 가능
*<style>로 각 페이지마다 css 적용 → css를 한 파일로 빼서 가져와서 사용
 여러 곳에 적용할 파일은 하나의 파일로 빼서 조립해서 사용
3) 반응형 웹
① header, main, footer로 3등분
→ @media(max-width:숫자 px){변경파트}
-768px: ipad 가로 사이즈 기준
-class이름 wrap/wrapper : 전체를 감쌀 때 많이 사용
-main은 ie가 안 먹고, 따로 뭐 주는게 없어서 class로 잘 안 감쌈
(태그이름.클래스명 + <tab> 하면 class 명 입력된 태그로 출력)
* &copy : copyright 모양으로 출력
*container : margin, padding이 먹는 네모박스

▷ 경로 = 위치
- 절대 경로: 다 
- 상대 경로 : 상대적인 경로만 쳐주는 것, 부모가 누구인지 형제가 누구인지
① / : 작업할 때는 사용 거의x, 최상위의 파일로 가게 함(root 폴더로 감), 파일의 첫 화면(도메인)으로 갈 때 주로 사용
ex. d드라이브에 있으면 d드라이브로 감
② ./ : 내 옆에 있는 것들, 형제들 찾을 때 같은 폴더에 들어가 있는 경우 검색
-생략 가능
ex. <link rel="stylesheet" href="./css/reset.css"> : ./폴더이름/파일이름
③ ../ : 부모로 가서 찾을 때, 폴더 바깥으로 나가라
ex. 내 파일이 1폴더에 있고 가져올 게 1폴더 밖에 있을 때 사용
여러 폴더 사이에서 찾을 때 사용

*index.html : 첫 페이지, 웹페이지 열 때 생략 가능(이름 변경 불가)
*같은 구역에 들어가는 이미지는 이름을 맞춰서 저장
* ul>li*4 + <enter>하면 <ul>안에 <li> 4개 생김
*<figure> : 이미지 넣을 때 사용, margin 가짐
*font-size: inherit : 폰트사이즈를 최상위에서 상속받아라
-크롬 포함 대부분 브라우저 폰트 기본사이즈 16px
*font-weight : 폰트 두께
*@import : 바깥의 파일을 가져와서 css에서 사용할 때
 link : 바깥의 파일을 html에서 사용

●코딩 표기법(각각마다 표기법에 차이)
1. 낙타(중간 단어 첫글자 대문자) 표기법
2. 언더라인(_) 표기법
3. 하이폰(-) 표기법 : 세계적으로 통용, 더블클릭했을 때 한단어로 안 잡히고, 산수 -로 찍히는 경우 있음

● 부모(선택자1) 후손(선택자3) 태그(직속 관계, 조상도 포함)와 부모 자식(선택자2) 태그(직속 관계만 포함) 선택자
1) 부모 후손 태그 표기법 : 선택자1 .선택자3
2) 부모 자식  태그 표기법 :  선택자1>.선택자2 : 후손태그는 적용 안됨
*한 태그에 클래스 같이 있을 때(div class= a b)클래스 붙여서 사용
* 태그1,태그2 → 선택자 여러 개 사용
* * → 태그 전체
<과제>
 공공데이터 활용 사례 찾기(맘에 드는 사이트 캡처)
-ex. 지도, 주소,